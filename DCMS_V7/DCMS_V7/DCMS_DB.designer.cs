#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DCMS_V7
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="C:\\PROGRAM FILES\\MICROSOFT SQL SERVER\\MSSQL11.SQLEXPRESS\\MSSQL\\DATA\\DCMS.MDF")]
	public partial class DCMS_DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertDoctor(Doctor instance);
    partial void UpdateDoctor(Doctor instance);
    partial void DeleteDoctor(Doctor instance);
    partial void InsertImage(Image instance);
    partial void UpdateImage(Image instance);
    partial void DeleteImage(Image instance);
    partial void InsertImageType(ImageType instance);
    partial void UpdateImageType(ImageType instance);
    partial void DeleteImageType(ImageType instance);
    partial void InsertKind(Kind instance);
    partial void UpdateKind(Kind instance);
    partial void DeleteKind(Kind instance);
    partial void InsertLab(Lab instance);
    partial void UpdateLab(Lab instance);
    partial void DeleteLab(Lab instance);
    partial void InsertLabType(LabType instance);
    partial void UpdateLabType(LabType instance);
    partial void DeleteLabType(LabType instance);
    partial void InsertPatient(Patient instance);
    partial void UpdatePatient(Patient instance);
    partial void DeletePatient(Patient instance);
    partial void InsertPiece(Piece instance);
    partial void UpdatePiece(Piece instance);
    partial void DeletePiece(Piece instance);
    partial void InsertPieceType(PieceType instance);
    partial void UpdatePieceType(PieceType instance);
    partial void DeletePieceType(PieceType instance);
    partial void InsertRequestedItem(RequestedItem instance);
    partial void UpdateRequestedItem(RequestedItem instance);
    partial void DeleteRequestedItem(RequestedItem instance);
    partial void InsertSpecialty(Specialty instance);
    partial void UpdateSpecialty(Specialty instance);
    partial void DeleteSpecialty(Specialty instance);
    partial void InsertSysUser(SysUser instance);
    partial void UpdateSysUser(SysUser instance);
    partial void DeleteSysUser(SysUser instance);
    partial void InsertTooth(Tooth instance);
    partial void UpdateTooth(Tooth instance);
    partial void DeleteTooth(Tooth instance);
    partial void InsertTreatment(Treatment instance);
    partial void UpdateTreatment(Treatment instance);
    partial void DeleteTreatment(Treatment instance);
    #endregion
		
		public DCMS_DBDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["C__PROGRAM_FILES_MICROSOFT_SQL_SERVER_MSSQL11_SQLEXPRESS_MSSQL_DATA_DCMS_MDFConne" +
						"ctionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DCMS_DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCMS_DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCMS_DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DCMS_DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Doctor> Doctors
		{
			get
			{
				return this.GetTable<Doctor>();
			}
		}
		
		public System.Data.Linq.Table<Image> Images
		{
			get
			{
				return this.GetTable<Image>();
			}
		}
		
		public System.Data.Linq.Table<ImageType> ImageTypes
		{
			get
			{
				return this.GetTable<ImageType>();
			}
		}
		
		public System.Data.Linq.Table<Kind> Kinds
		{
			get
			{
				return this.GetTable<Kind>();
			}
		}
		
		public System.Data.Linq.Table<Lab> Labs
		{
			get
			{
				return this.GetTable<Lab>();
			}
		}
		
		public System.Data.Linq.Table<LabType> LabTypes
		{
			get
			{
				return this.GetTable<LabType>();
			}
		}
		
		public System.Data.Linq.Table<Patient> Patients
		{
			get
			{
				return this.GetTable<Patient>();
			}
		}
		
		public System.Data.Linq.Table<Piece> Pieces
		{
			get
			{
				return this.GetTable<Piece>();
			}
		}
		
		public System.Data.Linq.Table<PieceType> PieceTypes
		{
			get
			{
				return this.GetTable<PieceType>();
			}
		}
		
		public System.Data.Linq.Table<RequestedItem> RequestedItems
		{
			get
			{
				return this.GetTable<RequestedItem>();
			}
		}
		
		public System.Data.Linq.Table<Specialty> Specialties
		{
			get
			{
				return this.GetTable<Specialty>();
			}
		}
		
		public System.Data.Linq.Table<SysUser> SysUsers
		{
			get
			{
				return this.GetTable<SysUser>();
			}
		}
		
		public System.Data.Linq.Table<Tooth> Tooths
		{
			get
			{
				return this.GetTable<Tooth>();
			}
		}
		
		public System.Data.Linq.Table<Treatment> Treatments
		{
			get
			{
				return this.GetTable<Treatment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _CountryID;
		
		private EntitySet<Patient> _Patients;
		
		private EntitySet<SysUser> _SysUsers;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryIDChanging(System.Nullable<int> value);
    partial void OnCountryIDChanged();
    #endregion
		
		public City()
		{
			this._Patients = new EntitySet<Patient>(new Action<Patient>(this.attach_Patients), new Action<Patient>(this.detach_Patients));
			this._SysUsers = new EntitySet<SysUser>(new Action<SysUser>(this.attach_SysUsers), new Action<SysUser>(this.detach_SysUsers));
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="Int")]
		public System.Nullable<int> CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Patient", Storage="_Patients", ThisKey="ID", OtherKey="City")]
		public EntitySet<Patient> Patients
		{
			get
			{
				return this._Patients;
			}
			set
			{
				this._Patients.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_SysUser", Storage="_SysUsers", ThisKey="ID", OtherKey="City")]
		public EntitySet<SysUser> SysUsers
		{
			get
			{
				return this._SysUsers;
			}
			set
			{
				this._SysUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Country", ThisKey="CountryID", OtherKey="ID", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._CountryID = value.ID;
					}
					else
					{
						this._CountryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.City1 = this;
		}
		
		private void detach_Patients(Patient entity)
		{
			this.SendPropertyChanging();
			entity.City1 = null;
		}
		
		private void attach_SysUsers(SysUser entity)
		{
			this.SendPropertyChanging();
			entity.City1 = this;
		}
		
		private void detach_SysUsers(SysUser entity)
		{
			this.SendPropertyChanging();
			entity.City1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Country")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<City> _Cities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Country()
		{
			this._Cities = new EntitySet<City>(new Action<City>(this.attach_Cities), new Action<City>(this.detach_Cities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_City", Storage="_Cities", ThisKey="ID", OtherKey="CountryID")]
		public EntitySet<City> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Cities(City entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Doctor")]
	public partial class Doctor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private System.Nullable<System.DateTime> _DoB;
		
		private EntitySet<RequestedItem> _RequestedItems;
		
		private EntitySet<Treatment> _Treatments;
		
		private EntityRef<SysUser> _SysUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnDoBChanging(System.Nullable<System.DateTime> value);
    partial void OnDoBChanged();
    #endregion
		
		public Doctor()
		{
			this._RequestedItems = new EntitySet<RequestedItem>(new Action<RequestedItem>(this.attach_RequestedItems), new Action<RequestedItem>(this.detach_RequestedItems));
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			this._SysUser = default(EntityRef<SysUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._SysUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoB", DbType="Date")]
		public System.Nullable<System.DateTime> DoB
		{
			get
			{
				return this._DoB;
			}
			set
			{
				if ((this._DoB != value))
				{
					this.OnDoBChanging(value);
					this.SendPropertyChanging();
					this._DoB = value;
					this.SendPropertyChanged("DoB");
					this.OnDoBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_RequestedItem", Storage="_RequestedItems", ThisKey="ID", OtherKey="DoctorID")]
		public EntitySet<RequestedItem> RequestedItems
		{
			get
			{
				return this._RequestedItems;
			}
			set
			{
				this._RequestedItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Treatment", Storage="_Treatments", ThisKey="ID", OtherKey="DoctorID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Doctor", Storage="_SysUser", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public SysUser SysUser
		{
			get
			{
				return this._SysUser.Entity;
			}
			set
			{
				SysUser previousValue = this._SysUser.Entity;
				if (((previousValue != value) 
							|| (this._SysUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUser.Entity = null;
						previousValue.Doctor = null;
					}
					this._SysUser.Entity = value;
					if ((value != null))
					{
						value.Doctor = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("SysUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestedItems(RequestedItem entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_RequestedItems(RequestedItem entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Doctor = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Image")]
	public partial class Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TypeID;
		
		private string _ImageURL;
		
		private EntityRef<RequestedItem> _RequestedItem;
		
		private EntityRef<ImageType> _ImageType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnImageURLChanging(string value);
    partial void OnImageURLChanged();
    #endregion
		
		public Image()
		{
			this._RequestedItem = default(EntityRef<RequestedItem>);
			this._ImageType = default(EntityRef<ImageType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._ImageType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ImageURL", DbType="VarChar(MAX)")]
		public string ImageURL
		{
			get
			{
				return this._ImageURL;
			}
			set
			{
				if ((this._ImageURL != value))
				{
					this.OnImageURLChanging(value);
					this.SendPropertyChanging();
					this._ImageURL = value;
					this.SendPropertyChanged("ImageURL");
					this.OnImageURLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_RequestedItem", Storage="_RequestedItem", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public RequestedItem RequestedItem
		{
			get
			{
				return this._RequestedItem.Entity;
			}
			set
			{
				RequestedItem previousValue = this._RequestedItem.Entity;
				if (((previousValue != value) 
							|| (this._RequestedItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestedItem.Entity = null;
						previousValue.Image = null;
					}
					this._RequestedItem.Entity = value;
					if ((value != null))
					{
						value.Image = this;
					}
					this.SendPropertyChanged("RequestedItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImageType_Image", Storage="_ImageType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public ImageType ImageType
		{
			get
			{
				return this._ImageType.Entity;
			}
			set
			{
				ImageType previousValue = this._ImageType.Entity;
				if (((previousValue != value) 
							|| (this._ImageType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ImageType.Entity = null;
						previousValue.Images.Remove(this);
					}
					this._ImageType.Entity = value;
					if ((value != null))
					{
						value.Images.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ImageType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ImageTypes")]
	public partial class ImageType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeString;
		
		private EntitySet<Image> _Images;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeStringChanging(string value);
    partial void OnTypeStringChanged();
    #endregion
		
		public ImageType()
		{
			this._Images = new EntitySet<Image>(new Action<Image>(this.attach_Images), new Action<Image>(this.detach_Images));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeString", DbType="VarChar(50)")]
		public string TypeString
		{
			get
			{
				return this._TypeString;
			}
			set
			{
				if ((this._TypeString != value))
				{
					this.OnTypeStringChanging(value);
					this.SendPropertyChanging();
					this._TypeString = value;
					this.SendPropertyChanged("TypeString");
					this.OnTypeStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ImageType_Image", Storage="_Images", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Image> Images
		{
			get
			{
				return this._Images;
			}
			set
			{
				this._Images.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.ImageType = this;
		}
		
		private void detach_Images(Image entity)
		{
			this.SendPropertyChanging();
			entity.ImageType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Kind")]
	public partial class Kind : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _KindString;
		
		private EntitySet<Treatment> _Treatments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnKindStringChanging(string value);
    partial void OnKindStringChanged();
    #endregion
		
		public Kind()
		{
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindString", DbType="VarChar(50)")]
		public string KindString
		{
			get
			{
				return this._KindString;
			}
			set
			{
				if ((this._KindString != value))
				{
					this.OnKindStringChanging(value);
					this.SendPropertyChanging();
					this._KindString = value;
					this.SendPropertyChanged("KindString");
					this.OnKindStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Treatment", Storage="_Treatments", ThisKey="ID", OtherKey="KindID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Kind = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Kind = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Lab")]
	public partial class Lab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<int> _Type;
		
		private EntitySet<LabType> _LabTypes;
		
		private EntitySet<RequestedItem> _RequestedItems;
		
		private EntityRef<SysUser> _SysUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
		
		public Lab()
		{
			this._LabTypes = new EntitySet<LabType>(new Action<LabType>(this.attach_LabTypes), new Action<LabType>(this.detach_LabTypes));
			this._RequestedItems = new EntitySet<RequestedItem>(new Action<RequestedItem>(this.attach_RequestedItems), new Action<RequestedItem>(this.detach_RequestedItems));
			this._SysUser = default(EntityRef<SysUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._SysUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Int")]
		public System.Nullable<int> Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lab_LabType", Storage="_LabTypes", ThisKey="ID", OtherKey="LabID")]
		public EntitySet<LabType> LabTypes
		{
			get
			{
				return this._LabTypes;
			}
			set
			{
				this._LabTypes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lab_RequestedItem", Storage="_RequestedItems", ThisKey="ID", OtherKey="LabID")]
		public EntitySet<RequestedItem> RequestedItems
		{
			get
			{
				return this._RequestedItems;
			}
			set
			{
				this._RequestedItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Lab", Storage="_SysUser", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public SysUser SysUser
		{
			get
			{
				return this._SysUser.Entity;
			}
			set
			{
				SysUser previousValue = this._SysUser.Entity;
				if (((previousValue != value) 
							|| (this._SysUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUser.Entity = null;
						previousValue.Lab = null;
					}
					this._SysUser.Entity = value;
					if ((value != null))
					{
						value.Lab = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("SysUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LabTypes(LabType entity)
		{
			this.SendPropertyChanging();
			entity.Lab = this;
		}
		
		private void detach_LabTypes(LabType entity)
		{
			this.SendPropertyChanging();
			entity.Lab = null;
		}
		
		private void attach_RequestedItems(RequestedItem entity)
		{
			this.SendPropertyChanging();
			entity.Lab = this;
		}
		
		private void detach_RequestedItems(RequestedItem entity)
		{
			this.SendPropertyChanging();
			entity.Lab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LabType")]
	public partial class LabType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _LabID;
		
		private string _TypeString;
		
		private EntityRef<Lab> _Lab;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLabIDChanging(System.Nullable<int> value);
    partial void OnLabIDChanged();
    partial void OnTypeStringChanging(string value);
    partial void OnTypeStringChanged();
    #endregion
		
		public LabType()
		{
			this._Lab = default(EntityRef<Lab>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabID", DbType="Int")]
		public System.Nullable<int> LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					if (this._Lab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeString", DbType="VarChar(50)")]
		public string TypeString
		{
			get
			{
				return this._TypeString;
			}
			set
			{
				if ((this._TypeString != value))
				{
					this.OnTypeStringChanging(value);
					this.SendPropertyChanging();
					this._TypeString = value;
					this.SendPropertyChanged("TypeString");
					this.OnTypeStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lab_LabType", Storage="_Lab", ThisKey="LabID", OtherKey="ID", IsForeignKey=true)]
		public Lab Lab
		{
			get
			{
				return this._Lab.Entity;
			}
			set
			{
				Lab previousValue = this._Lab.Entity;
				if (((previousValue != value) 
							|| (this._Lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab.Entity = null;
						previousValue.LabTypes.Remove(this);
					}
					this._Lab.Entity = value;
					if ((value != null))
					{
						value.LabTypes.Add(this);
						this._LabID = value.ID;
					}
					else
					{
						this._LabID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lab");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Patient")]
	public partial class Patient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _PhoneNumber;
		
		private string _EmailAddress;
		
		private System.Nullable<int> _City;
		
		private string _Address;
		
		private System.Nullable<System.DateTime> _DoB;
		
		private EntitySet<RequestedItem> _RequestedItems;
		
		private EntitySet<Tooth> _Tooths;
		
		private EntityRef<City> _City1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnCityChanging(System.Nullable<int> value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDoBChanging(System.Nullable<System.DateTime> value);
    partial void OnDoBChanged();
    #endregion
		
		public Patient()
		{
			this._RequestedItems = new EntitySet<RequestedItem>(new Action<RequestedItem>(this.attach_RequestedItems), new Action<RequestedItem>(this.detach_RequestedItems));
			this._Tooths = new EntitySet<Tooth>(new Action<Tooth>(this.attach_Tooths), new Action<Tooth>(this.detach_Tooths));
			this._City1 = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="Int")]
		public System.Nullable<int> City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					if (this._City1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoB", DbType="Date")]
		public System.Nullable<System.DateTime> DoB
		{
			get
			{
				return this._DoB;
			}
			set
			{
				if ((this._DoB != value))
				{
					this.OnDoBChanging(value);
					this.SendPropertyChanging();
					this._DoB = value;
					this.SendPropertyChanged("DoB");
					this.OnDoBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_RequestedItem", Storage="_RequestedItems", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<RequestedItem> RequestedItems
		{
			get
			{
				return this._RequestedItems;
			}
			set
			{
				this._RequestedItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Tooth", Storage="_Tooths", ThisKey="ID", OtherKey="PatientID")]
		public EntitySet<Tooth> Tooths
		{
			get
			{
				return this._Tooths;
			}
			set
			{
				this._Tooths.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Patient", Storage="_City1", ThisKey="City", OtherKey="ID", IsForeignKey=true)]
		public City City1
		{
			get
			{
				return this._City1.Entity;
			}
			set
			{
				City previousValue = this._City1.Entity;
				if (((previousValue != value) 
							|| (this._City1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City1.Entity = null;
						previousValue.Patients.Remove(this);
					}
					this._City1.Entity = value;
					if ((value != null))
					{
						value.Patients.Add(this);
						this._City = value.ID;
					}
					else
					{
						this._City = default(Nullable<int>);
					}
					this.SendPropertyChanged("City1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RequestedItems(RequestedItem entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_RequestedItems(RequestedItem entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
		
		private void attach_Tooths(Tooth entity)
		{
			this.SendPropertyChanging();
			entity.Patient = this;
		}
		
		private void detach_Tooths(Tooth entity)
		{
			this.SendPropertyChanging();
			entity.Patient = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Piece")]
	public partial class Piece : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TypeID;
		
		private string _Status;
		
		private EntityRef<RequestedItem> _RequestedItem;
		
		private EntityRef<PieceType> _PieceType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Piece()
		{
			this._RequestedItem = default(EntityRef<RequestedItem>);
			this._PieceType = default(EntityRef<PieceType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._PieceType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Piece_RequestedItem", Storage="_RequestedItem", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public RequestedItem RequestedItem
		{
			get
			{
				return this._RequestedItem.Entity;
			}
			set
			{
				RequestedItem previousValue = this._RequestedItem.Entity;
				if (((previousValue != value) 
							|| (this._RequestedItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RequestedItem.Entity = null;
						previousValue.Piece = null;
					}
					this._RequestedItem.Entity = value;
					if ((value != null))
					{
						value.Piece = this;
					}
					this.SendPropertyChanged("RequestedItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PieceType_Piece", Storage="_PieceType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public PieceType PieceType
		{
			get
			{
				return this._PieceType.Entity;
			}
			set
			{
				PieceType previousValue = this._PieceType.Entity;
				if (((previousValue != value) 
							|| (this._PieceType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PieceType.Entity = null;
						previousValue.Pieces.Remove(this);
					}
					this._PieceType.Entity = value;
					if ((value != null))
					{
						value.Pieces.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PieceType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PieceTypes")]
	public partial class PieceType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _TypeString;
		
		private EntitySet<Piece> _Pieces;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeStringChanging(string value);
    partial void OnTypeStringChanged();
    #endregion
		
		public PieceType()
		{
			this._Pieces = new EntitySet<Piece>(new Action<Piece>(this.attach_Pieces), new Action<Piece>(this.detach_Pieces));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeString", DbType="VarChar(50)")]
		public string TypeString
		{
			get
			{
				return this._TypeString;
			}
			set
			{
				if ((this._TypeString != value))
				{
					this.OnTypeStringChanging(value);
					this.SendPropertyChanging();
					this._TypeString = value;
					this.SendPropertyChanged("TypeString");
					this.OnTypeStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PieceType_Piece", Storage="_Pieces", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Piece> Pieces
		{
			get
			{
				return this._Pieces;
			}
			set
			{
				this._Pieces.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pieces(Piece entity)
		{
			this.SendPropertyChanging();
			entity.PieceType = this;
		}
		
		private void detach_Pieces(Piece entity)
		{
			this.SendPropertyChanging();
			entity.PieceType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RequestedItem")]
	public partial class RequestedItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _LabID;
		
		private System.Nullable<int> _PatientID;
		
		private System.Nullable<int> _DoctorID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Note;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Image> _Image;
		
		private EntityRef<Lab> _Lab;
		
		private EntityRef<Patient> _Patient;
		
		private EntityRef<Piece> _Piece;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLabIDChanging(System.Nullable<int> value);
    partial void OnLabIDChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public RequestedItem()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Image = default(EntityRef<Image>);
			this._Lab = default(EntityRef<Lab>);
			this._Patient = default(EntityRef<Patient>);
			this._Piece = default(EntityRef<Piece>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if ((this._Image.HasLoadedOrAssignedValue || this._Piece.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LabID", DbType="Int")]
		public System.Nullable<int> LabID
		{
			get
			{
				return this._LabID;
			}
			set
			{
				if ((this._LabID != value))
				{
					if (this._Lab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLabIDChanging(value);
					this.SendPropertyChanging();
					this._LabID = value;
					this.SendPropertyChanged("LabID");
					this.OnLabIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_RequestedItem", Storage="_Doctor", ThisKey="DoctorID", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.RequestedItems.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.RequestedItems.Add(this);
						this._DoctorID = value.ID;
					}
					else
					{
						this._DoctorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Image_RequestedItem", Storage="_Image", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Image Image
		{
			get
			{
				return this._Image.Entity;
			}
			set
			{
				Image previousValue = this._Image.Entity;
				if (((previousValue != value) 
							|| (this._Image.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Image.Entity = null;
						previousValue.RequestedItem = null;
					}
					this._Image.Entity = value;
					if ((value != null))
					{
						value.RequestedItem = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("Image");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Lab_RequestedItem", Storage="_Lab", ThisKey="LabID", OtherKey="ID", IsForeignKey=true)]
		public Lab Lab
		{
			get
			{
				return this._Lab.Entity;
			}
			set
			{
				Lab previousValue = this._Lab.Entity;
				if (((previousValue != value) 
							|| (this._Lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab.Entity = null;
						previousValue.RequestedItems.Remove(this);
					}
					this._Lab.Entity = value;
					if ((value != null))
					{
						value.RequestedItems.Add(this);
						this._LabID = value.ID;
					}
					else
					{
						this._LabID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Lab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_RequestedItem", Storage="_Patient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.RequestedItems.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.RequestedItems.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Piece_RequestedItem", Storage="_Piece", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public Piece Piece
		{
			get
			{
				return this._Piece.Entity;
			}
			set
			{
				Piece previousValue = this._Piece.Entity;
				if (((previousValue != value) 
							|| (this._Piece.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Piece.Entity = null;
						previousValue.RequestedItem = null;
					}
					this._Piece.Entity = value;
					if ((value != null))
					{
						value.RequestedItem = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("Piece");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specialty")]
	public partial class Specialty : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _SysUserID;
		
		private string _SpecialtyTitle;
		
		private EntityRef<SysUser> _SysUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSysUserIDChanging(System.Nullable<int> value);
    partial void OnSysUserIDChanged();
    partial void OnSpecialtyTitleChanging(string value);
    partial void OnSpecialtyTitleChanged();
    #endregion
		
		public Specialty()
		{
			this._SysUser = default(EntityRef<SysUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysUserID", DbType="Int")]
		public System.Nullable<int> SysUserID
		{
			get
			{
				return this._SysUserID;
			}
			set
			{
				if ((this._SysUserID != value))
				{
					if (this._SysUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSysUserIDChanging(value);
					this.SendPropertyChanging();
					this._SysUserID = value;
					this.SendPropertyChanged("SysUserID");
					this.OnSysUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecialtyTitle", DbType="VarChar(50)")]
		public string SpecialtyTitle
		{
			get
			{
				return this._SpecialtyTitle;
			}
			set
			{
				if ((this._SpecialtyTitle != value))
				{
					this.OnSpecialtyTitleChanging(value);
					this.SendPropertyChanging();
					this._SpecialtyTitle = value;
					this.SendPropertyChanged("SpecialtyTitle");
					this.OnSpecialtyTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Specialty", Storage="_SysUser", ThisKey="SysUserID", OtherKey="ID", IsForeignKey=true)]
		public SysUser SysUser
		{
			get
			{
				return this._SysUser.Entity;
			}
			set
			{
				SysUser previousValue = this._SysUser.Entity;
				if (((previousValue != value) 
							|| (this._SysUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SysUser.Entity = null;
						previousValue.Specialties.Remove(this);
					}
					this._SysUser.Entity = value;
					if ((value != null))
					{
						value.Specialties.Add(this);
						this._SysUserID = value.ID;
					}
					else
					{
						this._SysUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SysUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SysUser")]
	public partial class SysUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _PhoneNumber;
		
		private string _EmailAddress;
		
		private System.Nullable<int> _City;
		
		private string _Address;
		
		private System.Nullable<bool> _Admin;
		
		private System.Nullable<bool> _Ban;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Lab> _Lab;
		
		private EntitySet<Specialty> _Specialties;
		
		private EntityRef<City> _City1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailAddressChanging(string value);
    partial void OnEmailAddressChanged();
    partial void OnCityChanging(System.Nullable<int> value);
    partial void OnCityChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnAdminChanging(System.Nullable<bool> value);
    partial void OnAdminChanged();
    partial void OnBanChanging(System.Nullable<bool> value);
    partial void OnBanChanged();
    #endregion
		
		public SysUser()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Lab = default(EntityRef<Lab>);
			this._Specialties = new EntitySet<Specialty>(new Action<Specialty>(this.attach_Specialties), new Action<Specialty>(this.detach_Specialties));
			this._City1 = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="VarChar(50)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailAddress", DbType="VarChar(50)")]
		public string EmailAddress
		{
			get
			{
				return this._EmailAddress;
			}
			set
			{
				if ((this._EmailAddress != value))
				{
					this.OnEmailAddressChanging(value);
					this.SendPropertyChanging();
					this._EmailAddress = value;
					this.SendPropertyChanged("EmailAddress");
					this.OnEmailAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="Int")]
		public System.Nullable<int> City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					if (this._City1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Admin", DbType="Bit")]
		public System.Nullable<bool> Admin
		{
			get
			{
				return this._Admin;
			}
			set
			{
				if ((this._Admin != value))
				{
					this.OnAdminChanging(value);
					this.SendPropertyChanging();
					this._Admin = value;
					this.SendPropertyChanged("Admin");
					this.OnAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ban", DbType="Bit")]
		public System.Nullable<bool> Ban
		{
			get
			{
				return this._Ban;
			}
			set
			{
				if ((this._Ban != value))
				{
					this.OnBanChanging(value);
					this.SendPropertyChanging();
					this._Ban = value;
					this.SendPropertyChanged("Ban");
					this.OnBanChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Doctor", Storage="_Doctor", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.SysUser = null;
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.SysUser = this;
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Lab", Storage="_Lab", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public Lab Lab
		{
			get
			{
				return this._Lab.Entity;
			}
			set
			{
				Lab previousValue = this._Lab.Entity;
				if (((previousValue != value) 
							|| (this._Lab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Lab.Entity = null;
						previousValue.SysUser = null;
					}
					this._Lab.Entity = value;
					if ((value != null))
					{
						value.SysUser = this;
					}
					this.SendPropertyChanged("Lab");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SysUser_Specialty", Storage="_Specialties", ThisKey="ID", OtherKey="SysUserID")]
		public EntitySet<Specialty> Specialties
		{
			get
			{
				return this._Specialties;
			}
			set
			{
				this._Specialties.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_SysUser", Storage="_City1", ThisKey="City", OtherKey="ID", IsForeignKey=true)]
		public City City1
		{
			get
			{
				return this._City1.Entity;
			}
			set
			{
				City previousValue = this._City1.Entity;
				if (((previousValue != value) 
							|| (this._City1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City1.Entity = null;
						previousValue.SysUsers.Remove(this);
					}
					this._City1.Entity = value;
					if ((value != null))
					{
						value.SysUsers.Add(this);
						this._City = value.ID;
					}
					else
					{
						this._City = default(Nullable<int>);
					}
					this.SendPropertyChanged("City1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Specialties(Specialty entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = this;
		}
		
		private void detach_Specialties(Specialty entity)
		{
			this.SendPropertyChanging();
			entity.SysUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tooth")]
	public partial class Tooth : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PatientID;
		
		private System.Nullable<int> _ToothNumber;
		
		private string _Status;
		
		private string _Note;
		
		private EntitySet<Treatment> _Treatments;
		
		private EntityRef<Patient> _Patient;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPatientIDChanging(System.Nullable<int> value);
    partial void OnPatientIDChanged();
    partial void OnToothNumberChanging(System.Nullable<int> value);
    partial void OnToothNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Tooth()
		{
			this._Treatments = new EntitySet<Treatment>(new Action<Treatment>(this.attach_Treatments), new Action<Treatment>(this.detach_Treatments));
			this._Patient = default(EntityRef<Patient>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PatientID", DbType="Int")]
		public System.Nullable<int> PatientID
		{
			get
			{
				return this._PatientID;
			}
			set
			{
				if ((this._PatientID != value))
				{
					if (this._Patient.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatientIDChanging(value);
					this.SendPropertyChanging();
					this._PatientID = value;
					this.SendPropertyChanged("PatientID");
					this.OnPatientIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToothNumber", DbType="Int")]
		public System.Nullable<int> ToothNumber
		{
			get
			{
				return this._ToothNumber;
			}
			set
			{
				if ((this._ToothNumber != value))
				{
					this.OnToothNumberChanging(value);
					this.SendPropertyChanging();
					this._ToothNumber = value;
					this.SendPropertyChanged("ToothNumber");
					this.OnToothNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tooth_Treatment", Storage="_Treatments", ThisKey="ID", OtherKey="ToothID")]
		public EntitySet<Treatment> Treatments
		{
			get
			{
				return this._Treatments;
			}
			set
			{
				this._Treatments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Patient_Tooth", Storage="_Patient", ThisKey="PatientID", OtherKey="ID", IsForeignKey=true)]
		public Patient Patient
		{
			get
			{
				return this._Patient.Entity;
			}
			set
			{
				Patient previousValue = this._Patient.Entity;
				if (((previousValue != value) 
							|| (this._Patient.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Patient.Entity = null;
						previousValue.Tooths.Remove(this);
					}
					this._Patient.Entity = value;
					if ((value != null))
					{
						value.Tooths.Add(this);
						this._PatientID = value.ID;
					}
					else
					{
						this._PatientID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Patient");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Tooth = this;
		}
		
		private void detach_Treatments(Treatment entity)
		{
			this.SendPropertyChanging();
			entity.Tooth = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Treatment")]
	public partial class Treatment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DoctorID;
		
		private System.Nullable<int> _ToothID;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _KindID;
		
		private string _Note;
		
		private EntityRef<Doctor> _Doctor;
		
		private EntityRef<Kind> _Kind;
		
		private EntityRef<Tooth> _Tooth;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDoctorIDChanging(System.Nullable<int> value);
    partial void OnDoctorIDChanged();
    partial void OnToothIDChanging(System.Nullable<int> value);
    partial void OnToothIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnKindIDChanging(System.Nullable<int> value);
    partial void OnKindIDChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public Treatment()
		{
			this._Doctor = default(EntityRef<Doctor>);
			this._Kind = default(EntityRef<Kind>);
			this._Tooth = default(EntityRef<Tooth>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorID", DbType="Int")]
		public System.Nullable<int> DoctorID
		{
			get
			{
				return this._DoctorID;
			}
			set
			{
				if ((this._DoctorID != value))
				{
					if (this._Doctor.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDoctorIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorID = value;
					this.SendPropertyChanged("DoctorID");
					this.OnDoctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToothID", DbType="Int")]
		public System.Nullable<int> ToothID
		{
			get
			{
				return this._ToothID;
			}
			set
			{
				if ((this._ToothID != value))
				{
					if (this._Tooth.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToothIDChanging(value);
					this.SendPropertyChanging();
					this._ToothID = value;
					this.SendPropertyChanged("ToothID");
					this.OnToothIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KindID", DbType="Int")]
		public System.Nullable<int> KindID
		{
			get
			{
				return this._KindID;
			}
			set
			{
				if ((this._KindID != value))
				{
					if (this._Kind.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKindIDChanging(value);
					this.SendPropertyChanging();
					this._KindID = value;
					this.SendPropertyChanged("KindID");
					this.OnKindIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="NVarChar(MAX)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Doctor_Treatment", Storage="_Doctor", ThisKey="DoctorID", OtherKey="ID", IsForeignKey=true)]
		public Doctor Doctor
		{
			get
			{
				return this._Doctor.Entity;
			}
			set
			{
				Doctor previousValue = this._Doctor.Entity;
				if (((previousValue != value) 
							|| (this._Doctor.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Doctor.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Doctor.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._DoctorID = value.ID;
					}
					else
					{
						this._DoctorID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Doctor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Kind_Treatment", Storage="_Kind", ThisKey="KindID", OtherKey="ID", IsForeignKey=true)]
		public Kind Kind
		{
			get
			{
				return this._Kind.Entity;
			}
			set
			{
				Kind previousValue = this._Kind.Entity;
				if (((previousValue != value) 
							|| (this._Kind.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Kind.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Kind.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._KindID = value.ID;
					}
					else
					{
						this._KindID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Kind");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tooth_Treatment", Storage="_Tooth", ThisKey="ToothID", OtherKey="ID", IsForeignKey=true)]
		public Tooth Tooth
		{
			get
			{
				return this._Tooth.Entity;
			}
			set
			{
				Tooth previousValue = this._Tooth.Entity;
				if (((previousValue != value) 
							|| (this._Tooth.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tooth.Entity = null;
						previousValue.Treatments.Remove(this);
					}
					this._Tooth.Entity = value;
					if ((value != null))
					{
						value.Treatments.Add(this);
						this._ToothID = value.ID;
					}
					else
					{
						this._ToothID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Tooth");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
